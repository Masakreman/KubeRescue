apiVersion: apps/v1
kind: Deployment
metadata:
  name: test2-memory-leak-app
  labels:
    app: test2-memory-leak-app
    test: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test2-memory-leak-app
  template:
    metadata:
      labels:
        app: test2-memory-leak-app
    spec:
      containers:
      - name: memory-leak-simulator
        image: python:3.9-slim
        resources:
          limits:
            memory: "128Mi"
          requests:
            memory: "64Mi"
        command:
        - /bin/bash
        - -c
        - |
          cat > /app.py << 'EOF'
          import time
          import random
          import socket

          # Memory leak simulation
          memory_leak = []
          hostname = socket.gethostname()

          # Main loop
          while True:
              print("INFO Application running normally", flush=True)
              time.sleep(5)
              
              # Simulate memory leak with increasing probability
              if random.random() < 0.3:
                  # Add memory
                  leak_size = random.randint(1000, 5000)
                  memory_leak.append("x" * 1000 * leak_size)
                  current_memory = sum(len(x) for x in memory_leak) / (1024 * 1024)
                  
                  if current_memory > 40:
                      print("WARNING Memory usage increasing: {:.2f} MB".format(current_memory), flush=True)
                  
                  if current_memory > 70:
                      print("MEMORY_ERROR High memory usage detected: {:.2f} MB".format(current_memory), flush=True)
                  
                  if current_memory > 100:
                      print("CRITICAL_MEMORY_EXCEEDED Memory threshold at {:.2f} MB".format(current_memory), flush=True)
                      # Reset some memory to avoid OOMKill but maintain leak pattern
                      memory_leak = memory_leak[-len(memory_leak)//3:]
          EOF
          
          python -u /app.py